<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet" />
    <script defer src="https://vjs.zencdn.net/8.6.1/video.min.js"></script>
    <title>Document</title>
</head>
<body>
    <video 
        video id="my-video"
        class="video-js"
        controls
        preload="auto"
        width="500"
        height="480"
        controls 
        data-setup="{}">
        <source src="output1.m3u8">
    </video>



    <!-- Add a button to run the .bat file -->
    <button id="runBatButton">Run .bat File</button>
    <!-- Add a button to stop the batch file -->
    <button id="stopBatchButton">Stop Batch File</button>
    
    <!-- Add buttons for capture and start/stop recording -->
    <button id="captureButton">Capture</button>
    <button id="recordButton">Start/Stop Recording</button>

    <script>
        // Function to run the .bat file
        function runBatFile() {
            // Use fetch API to make a request to a server-side script that runs the .bat file
            fetch('run_bat_script.php') // Replace with the path to your server-side script
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => console.log(data))
                .catch(error => console.error('There was a problem with the fetch operation:', error));
        }

        // Attach the function to the button click event
        document.getElementById("runBatButton").addEventListener("click", runBatFile);

        function stopBatchFile() {
            // Use fetch API to make a request to the PHP script that creates the control mechanism
            fetch('stop_batch_file.php') // Replace with the path to your PHP script
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => console.log(data))
                .catch(error => console.error('There was a problem with the fetch operation:', error));
        }

        // Attach the function to the button click event
        document.getElementById("stopBatchButton").addEventListener("click", stopBatchFile);



        let mediaRecorder;
        let isRecording = false;
        let recordedChunks = [];

        // Function to capture the current frame of the video
        function captureFrame() {
            var video = document.getElementById('my-video');
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            var dataURL = canvas.toDataURL();
            // You can do something with the captured frame, like displaying it in an image element
            var img = document.createElement('img');
            img.src = dataURL;
            document.body.appendChild(img);
        }

        // Function to start or stop recording based on the current recording state
        function toggleRecording() {
            let video = document.getElementById('my-video');
            if (!isRecording) {
                mediaRecorder = new MediaRecorder(video.captureStream());
                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };
                mediaRecorder.start();
                isRecording = true;
                document.getElementById("recordButton").textContent = "Stop Recording";
            } else {
                mediaRecorder.stop();
                isRecording = false;
                document.getElementById("recordButton").textContent = "Start Recording";
            }
        }

        // Attach the captureFrame function to the capture button click event
        document.getElementById("captureButton").addEventListener("click", captureFrame);

        // Attach the toggleRecording function to the start/stop recording button click event
        document.getElementById("recordButton").addEventListener("click", toggleRecording);
        
    </script>
</body>
</html>
